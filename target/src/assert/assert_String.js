// Generated by CoffeeScript 1.12.7
(function() {
  var assert;

  assert = require('assert');

  String.prototype.assert_Contains = function(target, message) {
    var source;
    source = this.toString();
    message = message || ("expected string '" + source + "' to contain the string/array '" + target + "'");
    assert(source.contains(target), message);
    return this;
  };

  String.prototype.assert_Empty = function() {
    if (this.valueOf() !== '') {
      throw new Error("Expected empty string but it was " + this);
    }
    return this;
  };

  String.prototype.assert_File_Contents_Contains = function(value) {
    var message;
    message = "expected file '" + this + "' to contain '" + value + "'";
    this.file_Contents().assert_Contains(value, message);
    return this.valueOf();
  };

  String.prototype.assert_File_Contains = String.prototype.assert_File_Contents_Contains;

  String.prototype.assert_File_Contents = function(value) {
    var message;
    message = "expected file '" + this + "' contents to be '" + value + "'";
    this.file_Contents().assert_Is(value, message);
    return this.valueOf();
  };

  String.prototype.assert_File_Deleted = function() {
    var message;
    message = "expected file '" + this + "' have been deleted'";
    this.file_Delete().assert_Is_True(message);
    return this.valueOf();
  };

  String.prototype.assert_Not_Contains = function(target) {
    var message, source;
    source = this.toString();
    message = "expected string '" + source + "' to not contain the string '" + target + "'";
    assert(source.indexOf(target) === -1, message);
    return this;
  };

  String.prototype.assert_Not_Empty = function() {
    if (this.valueOf() === '') {
      throw new Error("Expected non empty string but it was ''");
    }
    return this;
  };

  String.prototype.assert_Is_Equal_To = function(target, message) {
    var source;
    source = this.toString();
    assert.equal(source, target, message);
    return this;
  };

  String.prototype.assert_Is_Not_Equal_To = function(target, message) {
    assert.notDeepEqual(this.valueOf(), target.valueOf(), message);
    return this;
  };

  String.prototype.assert_Is_Json = function() {
    var contents, json;
    contents = this.toString();
    try {
      json = JSON.parse(contents);
      return json;
    } catch (error) {
      throw '[assert_Is_JSON] failed to convert string to json';
    }
  };

  String.prototype.assert_Is_String = (function(_this) {
    return function() {
      assert.equal(typeof _this, 'object');
      return _this;
    };
  })(this);

  String.prototype.assert_Length_Is = function(size) {
    var message;
    message = "[assert_Length_Is]";
    assert.equal(this.length, size, message);
    return this;
  };

  String.prototype.assert_Length_Is_Not = function(size) {
    var message;
    message = "[assert_Length_Is_Not]";
    assert.notEqual(this.length, size, message);
    return this;
  };

  String.prototype.assert_That_File_Exists = function() {
    var file, message, test;
    file = this.toString();
    test = file.file_Exists();
    message = "[assert_That_File_Exists]: " + file;
    assert(test, message);
    return file;
  };

  String.prototype.assert_That_File_Not_Exists = function() {
    var file, message, test;
    file = this.toString();
    test = file.file_Not_Exists();
    message = "[assert_That_File_Not_Exists]: " + file;
    assert(test, message);
    return file;
  };

  String.prototype.assert_That_Folder_Exists = function() {
    var folder, message, test;
    folder = this.toString();
    test = message = "Expected " + folder + " to exist";
    folder.folder_Exists().assert_Is_True(message);
    return folder;
  };

  String.prototype.assert_Is_Folder = String.prototype.assert_That_Folder_Exists;

  String.prototype.assert_That_Folder_Not_Exists = function() {
    var folder, message, test;
    folder = this.toString();
    test = folder.folder_Exists().is_False();
    message = "[assert_That_Not_Folder_Exists]: " + folder;
    assert(test, message);
    return folder;
  };

  String.prototype.assert_Is = String.prototype.assert_Is_Equal_To;

  String.prototype.assert_Is_Not = String.prototype.assert_Is_Not_Equal_To;

  String.prototype.assert_Equals = String.prototype.assert_Is_Equal_To;

  String.prototype.assert_File_Exists = String.prototype.assert_That_File_Exists;

  String.prototype.assert_File_Not_Exists = String.prototype.assert_That_File_Not_Exists;

  String.prototype.assert_Folder_Exists = String.prototype.assert_That_Folder_Exists;

  String.prototype.assert_Folder_Not_Exists = String.prototype.assert_That_Folder_Not_Exists;

  String.prototype.assert_Size_Is = String.prototype.assert_Length_Is;

  String.prototype.assert_Size_Is_Not = String.prototype.assert_Length_Is_Not;

}).call(this);
