// Generated by CoffeeScript 1.12.7
(function() {
  var path;

  path = require('path');

  String.prototype.path_Combine = function(pathToAppend) {
    if (pathToAppend) {
      return path.join(this.toString(), pathToAppend);
    } else {
      return this.toString();
    }
  };

  String.prototype.file_Dir_Name = function() {
    return path.dirname(this.toString());
  };

  String.prototype.file_Parent_Folder = String.prototype.file_Dir_Name;

  String.prototype.parent_Folder = String.prototype.file_Dir_Name;

  String.prototype.file_Extension = function() {
    return path.extname(this.toString());
  };

  String.prototype.file_Name = function() {
    return path.basename(this.toString());
  };

  Array.prototype.file_Names = function() {
    var file, i, len, ref, results;
    ref = this;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      file = ref[i];
      results.push(file.file_Name());
    }
    return results;
  };

  String.prototype.append_To_Process_Cwd_Path = function() {
    return process.cwd().path_Combine(this.toString());
  };

  String.prototype.file_Name_Without_Extension = function() {
    return path.basename(this.toString()).replace(this.toString().file_Extension(), "");
  };

  Array.prototype.file_Names_Without_Extension = function() {
    var file, i, len, ref, results;
    ref = this;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      file = ref[i];
      results.push(file.file_Name_Without_Extension());
    }
    return results;
  };

  String.prototype.folder_Name = function() {
    return this.valueOf().file_Name();
  };

  Array.prototype.folder_Names = Array.prototype.file_Names;

}).call(this);
