// Generated by CoffeeScript 1.12.7
(function() {
  var expect;

  require('../../src/fluentnode');

  expect = require('chai').expect;

  describe('| js-native | Object', function() {
    var o;
    o = {};
    o.o = o;
    it('_str', function() {
      ""._str().assert_Is("");
      "123"._str().assert_Is("123");
      []._str().assert_Is([].toString());
      ({})._str().assert_Is({}.toString());
      return {
        a: '1'
      }._str().assert_Is("[object Object]");
    });
    it('json_Str', function() {
      "".json_Str().assert_Is("\"\"");
      "123".json_Str().assert_Is("\"123\"");
      ({}).json_Str().assert_Is("{}");
      ({
        a: 1
      }).json_Str().assert_Is("{\"a\":1}");
      return o.json_Str().assert_Is('');
    });
    it('json_Pretty', function() {
      ({
        a: 1
      }).json_Pretty().assert_Is('{\n  \"a\": 1\n}');
      [
        {
          a: 1
        }, {
          b: 1
        }
      ].json_Pretty().assert_Is('[\n  {\n    \"a\": 1\n  },\n  {\n    \"b\": 1\n  }\n]');
      ({
        a: 1
      }).json_Pretty().assert_Is('{\n  \"a\": 1\n}');
      ({
        "null": null
      }).json_Pretty().assert_Is('{\n  "null": null\n}');
      o.json_Pretty().assert_Is('');
      return {}.json_pretty.assert_Is({}.json_Pretty);
    });
    it('json_inspect', function() {
      var a;
      a = null;
      ({
        "null": null
      }).json_Inspect().assert_Is('{ null: null }');
      o.json_Inspect().assert_Is("{ o: [Circular] }");
      return o.json_inspect().assert_Is("{ o: [Circular] }");
    });
    it('keys_Own , _keys', function() {
      var abc;
      abc = {
        key1: '',
        key2: ''
      };
      abc.keys_Own().assert_Is_Equal_To(['key1', 'key2']);
      return abc._keys().assert_Is_Equal_To(['key1', 'key2']);
    });
    it('keys_All', function() {
      var abc;
      abc = (function() {
        function abc() {
          this.key1 = '';
          this.key2 = '';
        }

        abc.prototype.key1_All = function() {};

        abc.prototype.key2_All = function() {};

        return abc;

      })();
      new abc().keys_Own().assert_Is_Equal_To(['key1', 'key2']);
      return new abc().keys_All().assert_Is_Equal_To(['key1', 'key2', 'key1_All', 'key2_All']);
    });
    it('values', function() {
      var abc;
      abc = {
        key1: 'aaa',
        key2: 'bbb'
      };
      return abc.values().assert_Is_Equal_To(['aaa', 'bbb']);
    });
    it('call_Function', function() {
      var check_Call_Param;
      check_Call_Param = function(source, param1, param2) {
        source.assert_Is_Equal_To({
          'a': 'a'
        });
        param1.assert_Is_Equal_To('b');
        param2.assert_Is_Equal_To('c');
        return 'd';
      };
      ({
        'a': 'a'
      }).call_Function.assert_Is_Function();
      return {
        'a': 'a'
      }.call_Function(check_Call_Param, 'b', 'c').assert_Is('d');
    });
    it('save_Json , load_Json', function() {
      var source, target;
      target = '__tmp_'.add_5_Random_Letters().append_To_Process_Cwd_Path();
      source = {
        a: '123',
        b: '42'
      };
      target.assert_File_Not_Exists();
      source.save_Json(target);
      target.assert_File_Exists();
      target.load_Json().assert_Is(source);
      'aaaa'.save_As(target);
      target.load_Json().assert_Is({});
      return target.file_Delete().assert_True();
    });
    return it('repl_Me', function(done) {
      var anObject, replMe;
      anObject = {
        a: 'an value',
        b: 2
      };
      anObject.repl_Me.assert_Is_Function();
      replMe = anObject.repl_Me(done);
      replMe.assert_Is_Object();
      replMe.context.that.assert_Is(anObject);
      return replMe.rli.close();
    });
  });

}).call(this);
