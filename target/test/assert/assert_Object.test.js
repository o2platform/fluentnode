// Generated by CoffeeScript 1.12.7
(function() {
  require('../../src/fluentnode');

  describe('| Assert | Object', function() {
    it('assert_Is_Equal_To, assert_Is', function() {
      ''.assert_Is_Equal_To.assert_Is_Function();
      '{}'.assert_Is_Equal_To('{}');
      ({}).assert_Is_Equal_To({});
      ({
        'a': 'a'
      }).assert_Is_Equal_To({
        'a': 'a'
      });
      '12'.assert_Is_Equal_To('12');
      (function() {
        return '12'.assert_Is('12');
      }).assert_Not_Throws();
      return (function() {
        return '12'.assert_Is('42');
      }).assert_Throws();
    });
    it('assert_Is_Instance_Of, assert_Instance_Of', function() {
      ''.assert_Is_Instance_Of.assert_Is_Function();
      ''.assert_Is_Instance_Of(String);
      12..assert_Is_Instance_Of(Number);
      (new Error()).assert_Is_Instance_Of(Error);
      (function() {
        return '12'.assert_Instance_Of(String);
      }).assert_Not_Throws();
      return (function() {
        return '12'.assert_Instance_Of(Number);
      }).assert_Throws();
    });
    it('assert_Is_Not_Equal_To, assert_Is_Not', function() {
      ''.assert_Is_Not_Equal_To.assert_Is_Function();
      '{}'.assert_Is_Not_Equal_To('12');
      '12'.assert_Is_Not_Equal_To('42');
      ({
        'a': 'a'
      }).assert_Is_Not_Equal_To({
        'b': 'b'
      });
      (function() {
        return '12'.assert_Is_Not('42');
      }).assert_Not_Throws();
      return (function() {
        return '12'.assert_Is_Not('12');
      }).assert_Throws();
    });
    it('assert_Is_Null', function() {
      assert_Is_Null.assert_Is_Function();
      assert_Is_Null(null);
      (function() {
        return assert_Is_Null(null);
      }).assert_Not_Throws();
      return (function() {
        return assert_Is_Null('123');
      }).assert_Throws();
    });
    it('assert_Is_Not_Null', function() {
      assert_Is_Not_Null.assert_Is_Function();
      assert_Is_Not_Null('123');
      (function() {
        return assert_Is_Not_Null('123');
      }).assert_Not_Throws();
      return (function() {
        return assert_Is_Not_Null(null);
      }).assert_Throws();
    });
    it('assert_Is_Object', function() {
      ({}).assert_Is_Object.assert_Is_Function();
      return {}.assert_Is_Object().assert_Is_Equal_To({});
    });
    it('assert_Is_Undefined', function() {
      var aaaa;
      assert_Is_Undefined.assert_Is_Function();
      assert_Is_Undefined(void 0);
      aaaa = void 0;
      assert_Is_Undefined(aaaa);
      (function() {
        return assert_Is_Undefined(void 0);
      }).assert_Not_Throws();
      return (function() {
        return assert_Is_Undefined('123');
      }).assert_Throws();
    });
    it('assert_Is_Not_Undefined', function() {
      assert_Is_Not_Undefined.assert_Is_Function();
      assert_Is_Not_Undefined('123');
      (function() {
        return assert_Is_Not_Undefined('123');
      }).assert_Not_Throws();
      return (function() {
        return assert_Is_Not_Undefined(void 0);
      }).assert_Throws();
    });
    return it('assert_Keys_Is', function() {
      var a;
      a = {
        b: 42,
        c: 42
      };
      return a.assert_Keys_Is(['b', 'c']);
    });
  });

}).call(this);
