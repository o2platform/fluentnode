// Generated by CoffeeScript 1.12.7
(function() {
  require('../../src/fluentnode');

  describe('| Assert | Number', function() {
    it('assert_Bigger_Than', function() {
      1..assert_Bigger_Than(0);
      9..assert_Bigger_Than(5);
      (function() {
        return 0..assert_Bigger_Than(-1);
      }).assert_Not_Throws();
      (function() {
        return 0..assert_Bigger_Than(1);
      }).assert_Throws();
      0..assert_Bigger_Than.assert_Is(0..assert_Above);
      return 0..assert_Bigger_Than.assert_Is(0..assert_Is_Bigger_Than);
    });
    it('assert_In_Between', function() {
      1..assert_In_Between(0, 10);
      10..assert_In_Between(2, 11);
      (-1).assert_In_Between(-2, 0);
      (function() {
        return 0..assert_In_Between(-1, 1);
      }).assert_Not_Throws();
      return (function() {
        return 0..assert_In_Between(1, 2);
      }).assert_Throws(function(error) {
        return error.message.assert_Is('Expected 0 to be between 1 and 2');
      });
    });
    it('assert_Is_Equal_To, assert_Is', function() {
      0..assert_Is_Equal_To.assert_Is_Function();
      0..assert_Is_Equal_To(0);
      (function() {
        return 0..assert_Is_Equal_To(0);
      }).assert_Not_Throws();
      (function() {
        return 0..assert_Is_Equal_To(1);
      }).assert_Throws();
      return 0..assert_Is(0);
    });
    it('assert_Is_Not_Equal_To, assert_Is_Not', function() {
      0..assert_Is_Not_Equal_To.assert_Is_Function();
      0..assert_Is_Not_Equal_To(1);
      (function() {
        return 0..assert_Is_Not_Equal_To(1);
      }).assert_Not_Throws();
      (function() {
        return 0..assert_Is_Not_Equal_To(0);
      }).assert_Throws();
      return 0..assert_Is_Not(1);
    });
    it('assert_Is_Number', function() {
      var nan_Error_Message;
      0..assert_Is_Number.assert_Is_Function();
      0..assert_Is_Number().assert_Is(0);
      0..assert_Is_Number().assert_Is_Not(10);
      new Number(12).assert_Is_Number().assert_Is(12);
      Number(12).assert_Is_Number().assert_Is(12);
      Number('').assert_Is_Number().assert_Is(0);
      nan_Error_Message = 'The provided number was a NaN (Not an Number)';
      (function() {
        return (0/0).assert_Is_Number();
      }).assert_Throws(function(error) {
        return error.message.assert_Is(nan_Error_Message);
      });
      (function() {
        return Number('aaa').assert_Is_Number();
      }).assert_Throws(function(error) {
        return error.message.assert_Is(nan_Error_Message);
      });
      return (function() {
        return new Number('aaa').assert_Is_Number();
      }).assert_Throws(function(error) {
        return error.message.assert_Is(nan_Error_Message);
      });
    });
    return it('assert_Smaller_Than', function() {
      0..assert_Smaller_Than(1);
      5..assert_Smaller_Than(9);
      (function() {
        return (-1).assert_Smaller_Than(0);
      }).assert_Not_Throws();
      return (function() {
        return 1..assert_Smaller_Than(0);
      }).assert_Throws();
    });
  });

}).call(this);
